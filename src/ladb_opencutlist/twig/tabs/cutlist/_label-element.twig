{% set terms = (elementDef.formula)|split('.') %}
{% if terms[0] == 'thumbnail' %}
    {% set proportional = terms[1] == 'proportional' %}
    {% set drawing = terms[2] == 'drawing' %}
    {% set areaSize = elementDef.size * minUnit %}
    {% if elementDef.anchor starts with 'middle' %}
        {% set transX = areaSize * -0.5 %}
    {% elseif elementDef.anchor starts with 'end' %}
        {% set transX = areaSize * -1 %}
    {% else %}
        {% set transX = 0 %}
    {% endif %}
    {% if elementDef.anchor ends with 'top' %}
        {% set transY = 0 %}
    {% else %}
        {% set transY = areaSize * -1 %}
    {% endif %}
    <rect class="ladb-label-element" x="{{ transX }}" y="{{ transY }}" width="{{ areaSize }}" height="{{ areaSize }}" fill="{% if noEmptyValue %}rgba(0,0,0,0.03){% else %}none{% endif %}" stroke="none" />
    {% set plainStrokeWidth = minUnit / 7 %}
    {% set rectPartWidth = (areaSize - plainStrokeWidth) * (proportional ? entry.part.l_ratio : 1) %}
    {% set rectPartHeight = (areaSize - plainStrokeWidth) * (proportional ? entry.part.w_ratio : 1) %}
    <g transform="translate({{ transX + (areaSize - rectPartWidth) / 2 }} {{ transY + (areaSize - rectPartHeight) / 2 }})">
        {% if drawing %}
            {% set scale = max(rectPartWidth, rectPartHeight) %}
            {% set drawingStrokeWidth = minUnit / (20 * scale) %}
            {% set custom_value = entry.custom_values[index] %}
            <g transform="scale({{ scale }} {{ scale }}) translate(0 {{ entry.part.w_ratio }})">
                {% for layer in custom_value.layers %}
                    <path d="{{ layer.path }}" stroke="{{ elementDef.color }}" stroke-width="{{ drawingStrokeWidth }}" fill="#ffffff" />
                {% endfor %}
            </g>
            <g>
                {% if custom_value.edge_material_names.top %}<line x1="0" y1="0" x2="{{ rectPartWidth }}" y2="0" stroke-linecap="square" stroke="{{ hideMaterialColors ? elementDef.color: custom_value.edge_material_colors.top }}" stroke-width="{{ plainStrokeWidth }}" />{% endif %}
                {% if custom_value.edge_material_names.bottom %}<line x1="{{ rectPartWidth }}" y1="{{ rectPartHeight }}" x2="0" y2="{{ rectPartHeight }}" stroke-linecap="square" stroke="{{ hideMaterialColors ? elementDef.color : custom_value.edge_material_colors.bottom }}" stroke-width="{{ plainStrokeWidth }}" />{% endif %}
                {% if custom_value.edge_material_names.right %}<line x1="{{ rectPartWidth }}" y1="0" x2="{{ rectPartWidth }}" y2="{{ rectPartHeight }}" stroke-linecap="square" stroke="{{ hideMaterialColors ? elementDef.color : custom_value.edge_material_colors.right }}" stroke-width="{{ plainStrokeWidth }}" />{% endif %}
                {% if custom_value.edge_material_names.left %}<line x1="0" y1="{{ rectPartHeight }}" x2="0" y2="0" stroke-linecap="square" stroke="{{ hideMaterialColors ? elementDef.color : custom_value.edge_material_colors.left }}" stroke-width="{{ plainStrokeWidth }}" />{% endif %}
            </g>
        {% else %}
            {% set dashedStrokeWidth = minUnit / 20 %}
            <rect x="0" y="0" width="{{ max(0, rectPartWidth) }}" height="{{ max(0, rectPartHeight) }}" fill="#ffffff" stroke="none" />
            {% if entry.group.material_grained %}
                <g{% if (entry.part.flipped b-xor entry.part.axes_flipped) == 1 %} transform="translate({{ rectPartWidth }}, 0) scale(-1,1)"{% endif %}>
                    {% set arrowMargin = minUnit / 4 %}
                    {% set arrowX = arrowMargin %}
                    {% set arrowY = arrowMargin %}
                    {% set arrowWidth = rectPartWidth - arrowMargin * 2 %}
                    {% set arrowLength = rectPartHeight - arrowMargin * 2 %}
                    {% set arrowStrokeWidth = minUnit / 20 %}
                    {% set arrowPattern = [
                        [     0 , 1/3.0 ],
                        [ 1/2.0 , 1/3.0 ],
                        [ 1/2.0 ,     0 ],
                        [     1 , 1/2.0 ],
                        [ 1/2.0 ,     1 ],
                        [ 1/2.0 , 2/3.0 ],
                        [     0 , 2/3.0 ],
                        [     0 , 1/3.0 ],
                    ] %}
                    <polyline points="{% for point in arrowPattern %}{{ arrowX + arrowWidth * point[0] }},{{ arrowY + arrowLength * point[1] }} {% endfor %}" stroke="{{ elementDef.color }}" stroke-width="{{ arrowStrokeWidth }}" fill="none" />
                </g>
            {% endif %}
            <g>
                <line x1="0" y1="0" x2="{{ rectPartWidth }}" y2="0" stroke-linecap="square"{% if entry.part.edge_material_names.ymax %} stroke="{{ hideMaterialColors ? elementDef.color: entry.part.edge_material_colors.ymax }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="{{ elementDef.color }}" stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 4 }}"{% endif%} />
                <line x1="{{ rectPartWidth }}" y1="{{ rectPartHeight }}" x2="0" y2="{{ rectPartHeight }}" stroke-linecap="square"{% if entry.part.edge_material_names.ymin %} stroke="{{ hideMaterialColors ? elementDef.color : entry.part.edge_material_colors.ymin }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="{{ elementDef.color }}"  stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 4 }}"{% endif%} />
                <line x1="{{ rectPartWidth }}" y1="0" x2="{{ rectPartWidth }}" y2="{{ rectPartHeight }}" stroke-linecap="square"{% if entry.part.edge_material_names.xmax %} stroke="{{ hideMaterialColors ? elementDef.color : entry.part.edge_material_colors.xmax }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="{{ elementDef.color }}"  stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 4 }}"{% endif%} />
                <line x1="0" y1="{{ rectPartHeight }}" x2="0" y2="0" stroke-linecap="square"{% if entry.part.edge_material_names.xmin %} stroke="{{ hideMaterialColors ? elementDef.color : entry.part.edge_material_colors.xmin }}" stroke-width="{{ plainStrokeWidth }}"{% else %} stroke-width="{{ dashedStrokeWidth }}"stroke="{{ elementDef.color }}"  stroke-dasharray="{{ dashedStrokeWidth * 4 }}"{% endif%} />
            </g>
        {% endif %}
    </g>
{% elseif terms[0] == 'custom' and terms[1] == 'qr_code' and entry.custom_values[index]['error'] is empty %}
    {% set areaSize = elementDef.size * minUnit %}
    {% if elementDef.anchor starts with 'middle' %}
        {% set transX = areaSize * -0.5 %}
    {% elseif elementDef.anchor starts with 'end' %}
        {% set transX = areaSize * -1 %}
    {% else %}
        {% set transX = 0 %}
    {% endif %}
    {% if elementDef.anchor ends with 'top' %}
        {% set transY = 0 %}
    {% else %}
        {% set transY = areaSize * -1 %}
    {% endif %}
    <rect class="ladb-label-element" x="{{ transX }}" y="{{ transY }}" width="{{ areaSize }}" height="{{ areaSize }}" fill="{% if noEmptyValue %}rgba(0,0,0,0.03){% else %}none{% endif %}" stroke="none" />
    <g transform="translate({{ transX }} {{ transY }})" fill="{{ elementDef.color }}">
        {{ qr_code_svg(entry.custom_values[index], areaSize, elementDef.color) }}
    </g>
{% else %}
    {% if terms[0] == 'part' %}
        {% set key = terms[1] %}
        {% if key == 'description' %}
            {% set value = entry.part[key]|split('\n') %}
        {% elseif key == 'entity_named_path' %}
            {% set value = entry.entity_named_path %}
        {% elseif key == 'entity_name' %}
            {% set value = entry.entity_name %}
        {% elseif key == 'bin' %}
            {% set value = entry.bin %}
        {% elseif key == 'cutting_size' %}
            {% set value = entry.part.cutting_length~' x '~entry.part.cutting_width %}
        {% elseif key == 'edge_cutting_size' %}
            {% set value = entry.part.edge_cutting_length~' x '~entry.part.edge_cutting_width %}
        {% elseif key == 'size' %}
            {% set value = entry.part.length~' x '~entry.part.width %}
        {% elseif key == 'batch' %}
            {% set value = entry.position_in_batch~'/'~entry.part.count %}
        {% elseif key == 'tags' %}
            {% set value = entry.part.tags %}
        {% elseif key == 'edge' %}
            {% set edgeKey = terms[2] %}
            {% if entry.part.edge_material_names[edgeKey] is not null and entry.part.edge_std_dimensions[edgeKey] is not null %}
                {% set value = [entry.part.edge_material_names[edgeKey], entry.part.edge_std_dimensions[edgeKey]]|join(' | ') %}
            {% else %}
                {% set value = '' %}
            {% endif %}
        {% elseif key == 'face' %}
            {% set faceKey = terms[2] %}
            {% if entry.part.face_material_names[faceKey] is not null and entry.part.face_std_dimensions[faceKey] is not null %}
                {% set value = [entry.part.face_material_names[faceKey], entry.part.face_std_dimensions[faceKey]]|join(' | ') %}
            {% else %}
                {% set value = '' %}
            {% endif %}
        {% else %}
            {% set value = entry.part[key] %}
        {% endif %}
    {% elseif terms[0] == 'group' %}
        {% set key = terms[1] %}
        {% if key == 'material' %}
            {% set value = entry.group.material_name~' / '~entry.group.std_dimension %}
        {% else %}
            {% set value = entry.group[key] %}
        {% endif %}
    {% elseif terms[0] == 'filename' %}
        {% set value = filename %}
    {% elseif terms[0] == 'model_name' %}
        {% set value = modelName %}
    {% elseif terms[0] == 'page_name' %}
        {% set value = pageName %}
    {% elseif terms[0] == 'length_unit' %}
        {% set value = lengthUnit ? ('default.unit_'~lengthUnit)|i18next : '' %}
    {% elseif terms[0] == 'generated_at' %}
        {% set value = generatedAt|date(('default.date_format'|i18next)) %}
    {% elseif terms[0] == 'custom' %}
        {% if entry.custom_values[index]['error'] %}
            {% set error = entry.custom_values[index]['error'] %}
        {% else %}
            {% set value = entry.custom_values[index]|split('\n') %}
        {% endif %}
    {% endif %}
    {% if value|trim is empty and noEmptyValue|default(false) %}
        {% set value = '['~('tab.cutlist.labels.formula.'~(elementDef.formula|replace({ '.':'_' })))|i18next~']' %}
    {% endif %}
    {% if elementDef.anchor ends with 'top' %}
        {% set textAnchor = elementDef.anchor|split('-')[0] %}
        {% set transY = elementDef.size * minUnit * (value is iterable ? value|length : 1) %}
    {% else %}
        {% set textAnchor = elementDef.anchor %}
        {% set transY = 0 %}
    {% endif %}
    <text class="ladb-label-element" x="0" y="{{ transY }}" font-size="{{ error ? 0.5 * minUnit : elementDef.size * minUnit }}" text-anchor="{{ textAnchor }}" fill="{{ error ? 'red' : elementDef.color }}">{% spaceless %}
        {% if error %}
            {{ error|trim|escape }}
        {% else %}
            {% if value is iterable %}
                {% for line in value %}
                    <tspan {% if loop.first %}dy="-{{ elementDef.size * minUnit * ((value|length) - 1) }}"{% else %}x="0" dy="{{ elementDef.size * minUnit }}"{% endif %}>{{ line|trim|escape }}</tspan>
                {% endfor %}
            {% else %}
                {{ value|trim|escape }}
            {% endif %}
        {% endif %}
    {% endspaceless %}</text>
{% endif %}